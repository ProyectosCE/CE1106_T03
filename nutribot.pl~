:- consult('nutribot-BNF').
:- consult('nutribot-diets').

% Definir dietas con recomendaciones
dieta('alta en proteina', ["no",'alta','proteica']).
dieta('vegana',['colesterol alto','media','vegana']).
dieta('keto', ['keto','baja en carbohidratos','grasas saludables']).
dieta('vegetariana', ['vegetariana','sin carne']).

% Base de datos de usuarios (inicialmente vacía)
user("perfil", []).

% Definir temas y palabras clave asociadas
tema('bienvenida', ['hola', 'como', 'estas', 'buenas', 'holi','holap','uwu']).
tema('despedida', ['adios', 'hasta', 'luego','chao']).
tema('ayuda', ['ayuda', 'sobre', 'peso', 'deseo', 'quiero', 'me', 'gustaria', 'dieta', 'saludable', 'vida']).
tema('Dislipidemia',['problema','control','colesterol','Dislipidemia']).
tema('Hipercolesterolemia',['Hipercolesterolemia','aumento','niveles','colesterol','sangre']).
tema('actividad_alta', ['mas', '5', 'veces', 'alta', 'frecuente', 'diariamente']).
tema('actividad_media', ['3', 'veces', 'media', 'moderada','mucho']).
tema('actividad_baja', ['menos', '3' ,'veces', 'baja', 'poco', 'sedentario','no','hago','ejercicio','casi','nada']).
tema('saludable',['no','enfermo','saludable','estoy']).
tema('calorias', ['calorias', '1800', '3000', '1500', 'cantidad', 'consumir']).
tema('preferencia_dieta', ['dieta', 'keto', 'vegana', 'vegetariana', 'sin', 'mariscos', 'proteina', 'grasas', 'azucar']).
tema('sobrepeso', ['sobrepeso', 'peso', 'normal', 'quiero', 'deseo']).

% Definir respuestas para los temas
respuesta_tema('bienvenida', 'Hola, encantado de verte. ¿En qué te puedo ayudar hoy?').
respuesta_tema('despedida', '¡Hasta la próxima! Cuídate.').
respuesta_tema('ayuda', 'Soy tu nutricionista profesional. ¿Padeces alguna enfermedad?').
respuesta_tema('Dislipidemia', 'Te recomendaría una dieta baja en grasas. ¿Cuántas calorías diarias te gustaría consumir?').
respuesta_tema('Hipercolesterolemia', 'Te recomendaría una dieta vegana. ¿Qué tanta actividad física realizas?').
respuesta_tema('actividad_alta', '¡Genial! Hacer actividad más de 5 veces por semana es excelente para tu salud.').
respuesta_tema('actividad_media', 'Hacer ejercicio 3 veces por semana es un buen inicio. Sigue así.').
respuesta_tema('actividad_baja', 'Es importante aumentar tu actividad física para mejorar tu salud. Intenta hacer ejercicio al menos 3 veces por semana.').
respuesta_tema('calorias', 'Especifica cuántas calorías diarias deseas consumir.').
respuesta_tema('preferencia_dieta', '¿Tienes alguna preferencia alimenticia o algún tipo de dieta que te gustaría seguir?').

% Respuestas fallback para entradas individuales
respuesta('hola', 'Hola, ¿cómo puedo ayudarte hoy?').
respuesta('como estas', 'Estoy bien, gracias. ¿Y tú?').
respuesta('cual es tu nombre', 'Soy Nutrichat, tu nutricionista personal. ¿Cómo te llamas tú?').
respuesta('adios', '¡Hasta luego!').
respuesta(_, 'Lo siento, no entiendo tu pregunta. ¿Puedes reformularla?').

% Normalizar entrada: convierte a minúsculas, elimina puntuación, y convierte palabras a átomos
normalizar_entrada(Input, PalabrasNormalizadas) :-
    string_lower(Input, Minuscula),
    split_string(Minuscula, " ", ".,!?", Partes),  % Dividir por espacios y eliminar puntuación
    maplist(atom_string, PalabrasNormalizadas, Partes).  % Convertir strings a átomos para comparación

% Coincidencia de palabras con un tema
coincidencia_tema(Palabras, Tema, Conteo) :-
    tema(Tema, PalabrasClave),
    contar_coincidencias(Palabras, PalabrasClave, 0, Conteo).

% Contar cuántas palabras coinciden con las palabras clave del tema
contar_coincidencias([], _, Conteo, Conteo).
contar_coincidencias([Palabra|Resto], PalabrasClave, Acum, Conteo) :-
    (   member(Palabra, PalabrasClave)
    ->  NuevoAcum is Acum + 1
    ;   NuevoAcum is Acum
    ),
    contar_coincidencias(Resto, PalabrasClave, NuevoAcum, Conteo).

% Buscar si algún tema coincide con las palabras de entrada
buscar_tema(Palabras, Tema) :-
    coincidencia_tema(Palabras, Tema, Conteo),
    Conteo >= 2.

% Validación gramatical básica (aceptar frases con una longitud mínima)
validacion_gramatical(Palabras) :-
    length(Palabras, L),
    L >= 1.  % Aceptar frases de longitud mayor o igual a 1 palabra

% Bucle de interacción principal con validación gramatical
chat :-
    write('Tu: '),
    flush_output,
    read_line_to_string(user_input, EntradaRaw),
    normalizar_entrada(EntradaRaw, Palabras),
    (   Palabras == ['adios']
    ->  write('Chatbot: ¡Hasta luego!'), nl
    ;   (   validacion_gramatical(Palabras)  % Validar la gramática antes de continuar
        ->  (   buscar_tema(Palabras, Tema)
            ->  respuesta_tema(Tema, Respuesta),
                write('Chatbot: '), write(Respuesta), nl
            ;   atomic_list_concat(Palabras, ' ', Entrada),
                respuesta(Entrada, Respuesta),
                write('Chatbot: '), write(Respuesta), nl
            )
        ;   write('Oración gramaticalmente incorrecta. Escriba de nuevo su oración.'), nl
        ),
        chat
    ).

% Punto de entrada
comienzo :-
    write('Bienvenido a NutriTec. Escribe "adios" para terminar.'), nl,
    chat.

